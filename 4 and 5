第4章
算法分析题
4-3
频率恰好是前8个Fibonacci数的哈弗曼编码分别是：
a:0000000
b:0000001
c:000001
d:00001
e:0001
f:001
g:01
h:1

算法实现题
4-1代码：
int greedy(vector<piont> x)
{
int sum=0,curr=0,n=x,size();
sort(x.begin(),x.end());
for(int i=0;i<n;i++){
if(x[i].leftend())
curr++;
else 
curr--;
if((i==n-1||x[i]<x[i+1]) && curr > sum)
sum=curr;
}
return sum;
}

4-4代码：
double greedy (vector <int> p)
{
int n=p.size();
vector<int> x(n,0);
sort(p.begin(),p.end());
int k=(n-1)/2;
x[k]=p[n-1];
for(int i=k+1;i<n;i++)
x[i]=p[n-2*(i-k)];
for(i=k-1;i>=0;i--)
x[i]=p[n-2*(k-i)-1];
double m=0,t=0;
for(i=0;i<n;i++){
m+=p[i];
for(int j=i+1;j<n;j++)
t+=x[j]*x[j]*(j-i);
}
t=t/m/m;
return t;
}

4-7代码：
double greedy(vector <int> x, int s)
{
vector <int> st(s+1, 0);
vector <int> su(s+1, 0);
int n=x.size();
sort (x.begin(), x.end);
int i=0,j=0;
while (i<n) {
st[j]+=x[i];
su[j]+=st[j];
i++;
j++;
if(j==s)
j=0;
}
double t=0;
for (i=0;i<s;i++)
t+=su[i];
t/=n;
return t;
}


第5章
算法分析题
5-4代码：
void Clique : : iterClique ()
{
for (int i=0; i<=n; i++)
x[i]=0;
i=1;
while (ture) {
while(i<=n && ok(i))  {x[i++] = 1; cn++;}
if (i>=n){
for(int j=1;j<=n;j++)
bestx[j]=x[j];
bestn=cn;
}
else x[i++]=0;
while(cn+n-i<=bestn){
i--;
while(i && !x[i])
i--;
if(i==0)
return;
x[i++]=0;
cn--;
}
}
}
其中，ok用于判断当前顶点是否可加入当前团
bool Clique : : ok(int i)
{
for (int j=1;j<i;j++)
if(x[j] && a[i][j]==NoEdge) 
retuen false;
return ture;
}
IterClique作初始化，并调用迭代回溯法求解
int Clique : :IterClique(v[])
{
x=new int[n+1];
cn=0;
bestn=0;
bestx=v;
IterClique();
delete [] x;
return bestn;
}

算法实现题
5-8代码：
void compute()
{
K=1;
while (! search (1,n)) {
k++;
if(k>maxdep) break;
init();
}
If (found)  output();
else cout<<”No Solution !”<< end 1;
}
Search实现回溯搜索
bool search(int dep, int n)
{
If(dep > k)
return false;
for(int i=0;i<2;i++){
int n1=f(n,i);
t[dep]=i;
if(n1==m || search(dep+1,n1)) 
{found=ture; out();return ture;}
}
return false;
}

5-23代码：
void Circle : : Backtrack(int t)
{
if(t > n) Output();
else for(int i=t ; i<=n ; i++){
   swap(x[t] , x[i]);
if(Constraint(t) && Bound(t)) {
Change(t);
Backtrack(t+1);
Restoro(t);
}
swap(x[t] , x[i]);
}
}
其中，结点可行性判定函数Constraint和上界函数Bound等必要的函数通过类Circle的私有函数传递
void Circle : : Output()
{
float low=0 , high=0;
for(int i=1 ; i<n ; i++){
if(xr[i]-x[i]<low)  low= xr[i]-x[i];
if(xr[i]+x[i]>high)  high= xr[i]+x[i];
}
if(high-low<min)  min=high-low;
}

bool Circle : : Constraint(int t)
{
return ture;
}

bool Circle : : Bound(int t)
{
centerx=Center(t);
if(centerx+x[t]+x[1]<min)  return ture;
else return false;
}

void Circle : : Restore(int t)
{}
Center用于计算当前所选择圆的圆心撗坐标
float temp=0;
for(int j=1 ; j<t ; j++){
float valuex=xr[j]+2.0*sqrt(x[t]*x[j]);
if(valuex > temp)  temp=valuex ;
}
return temp;
}

5-24代码：
void Color : : Backtrack(int t)
{
if(t>n) Output();
else for(int i=f(n ,t); i<=g(n ,t); i++){
x[t]=h(i);
Change(t);
if (Constraint(t) && Bound(t)  Backtrack(t+1));
Restore(t);
}
}
其中，生成解空间中下一拓展结点的函数，结点可行性判定函数Constraint和上界函数Bound等必要的函数通过类Color的私有函数传递
void Color : : Output()
{
sum++;
}
bool Color : : Constraint(int t)
{
for(int j=1 ; j<=n ; j++) 
if((a[t][j]==1) && (x[j]==x[t]))  return false;
return ture;
}

bool Color : : Bound(int t)
{
return ture;
}

void Color : : Change(int t)
{}

void Color : : Restore(int t)
{
x[t]=0;
}

int Color : : f(int n, int t)
{
return 1;
}

int Color : : g(int n, int t)
{
return m;
}

int Color : : h(int i)
{
return i;
}
